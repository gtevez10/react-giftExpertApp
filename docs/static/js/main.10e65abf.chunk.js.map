{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","estadoAnterior","type","value","onChange","target","getGifs","indexCategory","a","url","encodeURI","fetch","resp","json","data","gifs","map","index","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","dataGifs","useFetchGifs","indexGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,mCACI,uBAAMC,SAZO,SAAAC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAc,OAAMP,GAAN,mBAAqBO,OACjDN,EAAc,MAOd,UAEI,+CACA,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBU,SAACP,GAAD,MAAO,CAC7BF,EAAcE,EAAEQ,OAAOF,iB,+BCLlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,kDAEqCC,UAAWH,GAFhD,gEAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAU,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QATzB,kBAcXM,GAdW,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAAnBb,EAAkB,EAAlBA,IAAKU,EAAa,EAAbA,MAGhC,OACI,sBAAKI,UAAW,OAAhB,UACE,qBAAKC,IAAOf,EAAMgB,IAAON,IACzB,4BAAOA,QCHJO,EAAU,SAAC,GAAuB,IAArBnB,EAAoB,EAApBA,cAAoB,ECFlB,SAACA,GAAmB,IAAD,EAEjBd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ8B,mBAEpCC,EAFoC,KAE7BC,EAF6B,KAsB3C,OAbAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAGGqB,EDlB4BK,CAAa1B,GAAxCoB,EAFkC,EAElCA,QAAcK,EAFoB,EAEzBlB,KAGjB,OACI,qCACI,6BAAMP,IACJoB,GAAW,6CACT,qBAAKJ,UAAU,UAAf,SACI,6BAEQS,EAAShB,KAAI,SAAAkB,GAAS,OAClB,cAAC,EAAD,eAEQA,GADCA,EAAUhB,eEyBpCiB,EAxCM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,cAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAWvB,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAa,OACxB,cAAC,EAAD,CAEIA,cAAgBA,GADVA,QAStB,mD,MC5BZ8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.10e65abf.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => [\r\n        setInputValue(e.target.value)\r\n\r\n    ]\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n\r\n            setCategories(estadoAnterior => [ inputValue, ...estadoAnterior]); //Genero una copia del estado anterior y le agrego inputValue que contiene lo digitado en los campos de texto \r\n            setInputValue(''); //Limpio el estado inputValue y limpio el campo de texto \r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit ={ handleSubmit }>\r\n\r\n                <h2>Add Category </h2>\r\n                <input\r\n                    type='text'\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                />\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n// PETICION PARA OBTENER LOS GIFTS \r\n\r\nexport const getGifs = async ( indexCategory ) => {   //encodeURI SIRVE para reemplazar los espacios con que venga indexCategory por %20 y troas cosas de URLS validas\r\n\r\n    const url = ` https://api.giphy.com/v1/gifs/search?q=${ encodeURI( indexCategory )  }&limit=10&api_key=SaGgLbKvq7zTXOkrWbLiaziKSr8TA0cF `; //DEBO AGREGARLE https:// ademas los espacios generados los relleno con + \r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json(); // hago desestructuracion de data ya que solo me interesa eso \r\n    const gifs = data.map(index => { // Busco las propiedades de data que me interesan \r\n        return {\r\n            id: index.id,\r\n            title: index.title,\r\n            url: index.images?.downsized_medium.url, //utilo ? para preguntar que si vienen las imagenes entonces la utilice , si no existe me devulve undefined y no error\r\n        }\r\n    })\r\n\r\n    \r\n    return( gifs ) ; // me devuelve una promesa (NO lo gifs) que resuelve mi peticion a la coleccion de las imagenes \r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { url, title } ) => {\r\n\r\n    \r\n    return (\r\n        <div className= 'card'>\r\n          <img src= { url } alt= { title }/>\r\n          <p  >{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ indexCategory }) => {\r\n\r\n    const { loading, data:dataGifs } = useFetchGifs(indexCategory);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{ indexCategory }</h3>\r\n            { loading && <p> Loading... </p>}\r\n                <div className='divCard'>\r\n                    <ol>\r\n                        {\r\n                            dataGifs.map(indexGifs => (\r\n                                <GifGridItem\r\n                                    key={indexGifs.id}\r\n                                    {...indexGifs} //DE ESTA MANERA le paso cada una de las propiedades individualmente \r\n\r\n                                />\r\n                            ))\r\n                        }\r\n                    </ol>\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/GetGifs'\r\n\r\nexport const useFetchGifs = (indexCategory) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n\r\n\r\n    useEffect(() => { //TODO AQUI ADENTRO SOLO se ejecuta cuando indexCategory cambia OJO colocar  , [] \r\n\r\n        getGifs(indexCategory) // Helper. Peticion HTTP para obtener los Gifts\r\n            .then(dataGifs => {\r\n                setstate({\r\n                    data: dataGifs,\r\n                    loading: false,\r\n                });\r\n            })\r\n\r\n    }, [indexCategory])\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']) // el segundo argumetno del useState contiene guardado el estado anterior \r\n\r\n    /*const handleAdd = () => {\r\n        \r\n      setCategories([...categories, 'Naruto'])  PARA ANADIR UN ELEMENTO A categories\r\n\r\n    }*/\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(indexCategory => (\r\n                        <GifGrid\r\n                            key={ indexCategory } \r\n                            indexCategory={ indexCategory }\r\n                        />\r\n                    ))\r\n                \r\n                }\r\n\r\n            </ol>\r\n\r\n            <button > Agregar </button>\r\n        </>\r\n\r\n\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\nimport './index.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}